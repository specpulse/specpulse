description = "Generate or validate implementation plans with versioning"
prompt = """
Handle the /sp-plan command with arguments: {{args}}

First, detect current feature context:
- Read memory/context.md for current feature metadata
- Use git branch name if available (e.g., 001-user-authentication)
- Fall back to most recently created feature directory
- If no context found, ask user to specify feature or run /sp-pulse first

Parse arguments to determine action:
- If "validate": Check plan against constitution
- Otherwise: Generate new plan

## For /sp-plan generate or /sp-plan:
1. Show list of existing spec files in current feature directory
2. Ask user which spec file to base plan on
3. Read selected specification from @{specs/*/spec-XXX.md}

4. Run Phase Gates checks:
   - Constitutional compliance
   - Simplicity check (≤3 modules)
   - Test-first strategy defined
   - Framework selection complete
   - Research completed

5. Generate plan sections:
   - Technology stack
   - Architecture overview
   - Implementation phases
   - API contracts
   - Data models
   - Testing strategy

6. Track complexity:
   - If >3 modules, document justification
   - Create simplification roadmap

7. Check existing plan files and create next version (plan-001.md, plan-002.md, etc.)
8. Write plan to plans/XXX-feature/plan-XXX.md
9. Run cross-platform validation:
   - Linux/macOS: !{bash scripts/sp-pulse-plan.sh "XXX-feature"}
   - Fallback: !{python scripts/sp-pulse-plan.py "XXX-feature"}

## For /sp-plan validate:
1. Show list of existing plan files in current feature directory
2. Ask user which plan file to validate
3. Read selected plan from @{plans/*/plan-XXX.md}
4. Run cross-platform validation:
   - Linux/macOS: !{bash scripts/sp-pulse-plan.sh "XXX-feature"}
   - Fallback: !{python scripts/sp-pulse-plan.py "XXX-feature"}
5. Verify Phase Gates compliance
6. Check complexity tracking
7. Ensure test-first approach
8. Validate framework choices
9. Report validation results

Phase Gates (Phase -1) must pass before implementation:
- ✅ Using ≤3 projects/modules
- ✅ Tests defined before code
- ✅ Using framework features directly
- ✅ No premature abstractions
- ✅ Research completed

Examples:
- /sp-plan generate
- /sp-plan validate
"""