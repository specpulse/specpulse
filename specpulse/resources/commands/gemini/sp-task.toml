description = "Generate and manage task breakdowns with versioning"
prompt = """
Handle the /sp-task command with arguments: {{args}}

First, detect current feature context:
- Read memory/context.md for current feature metadata
- Use git branch name if available (e.g., 001-user-authentication)
- Fall back to most recently created feature directory
- If no context found, ask user to specify feature or run /sp-pulse first

Parse arguments to determine action:
- If "update": Update task status
- If "status": Show progress
- Otherwise: Generate task breakdown

## For /sp-task breakdown or /sp-task:
1. Show list of existing plan files in current feature directory
2. Ask user which plan file to base tasks on
3. Read selected implementation plan from @{plans/*/plan-XXX.md}

4. Generate tasks from plan:
   - Create task categories:
     • Critical Path (Phase 0)
     • Phase 1: Foundation
     • Phase 2: Core Features
     • Phase 3: Polish
     • Phase 4: Testing

   - For each task:
     • Use T[XXX] format (T001, T002)
     • Include clear description
     • Mark dependencies
     • Estimate complexity (S/M/L/XL)
     • Assign priority

5. Check existing task files and create next version (task-001.md, task-002.md, etc.)
6. Write tasks to tasks/XXX-feature/task-XXX.md
7. Run validation:
   - !{bash scripts/sp-pulse-task.sh "XXX-feature"}

## For /sp-task update:
1. Show list of existing task files in current feature directory
2. Ask user which task file to update
3. Read selected current tasks from @{tasks/*/task-XXX.md}
4. Ask which tasks to update
5. Mark tasks as completed/in-progress
6. Add newly discovered tasks
7. Update dependencies and blockers
8. Save updated task list
9. Run validation:
   - !{bash scripts/sp-pulse-task.sh "XXX-feature"}

## For /sp-task status:
1. Show list of existing task files in current feature directory
2. Ask user which task file to show status for
3. Read selected current tasks
4. Run analysis:
   - !{bash scripts/sp-pulse-task.sh "XXX-feature"}
5. Count completed vs total
6. Show current phase progress
7. List any blockers
8. Estimate remaining work
9. Display progress summary

Task Format:
```markdown
- [ ] T001: [S] Set up project structure
- [ ] T002: [M] Create database schema
- [x] T003: [L] Implement authentication
```

Examples:
- /sp-task breakdown
- /sp-task update
- /sp-task status
"""