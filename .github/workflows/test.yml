name: SpecPulse CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'v*' ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11', '3.12']
        exclude:
          # Exclude some combinations to reduce CI load
          - os: macos-latest
            python-version: '3.12'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install pytest-cov pytest-xdist

    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=specpulse --cov-report=xml --cov-report=html --cov-report=term-missing -n auto

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Archive coverage reports
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports-${{ matrix.os }}
        path: htmlcov/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Run integration tests
      run: |
        pytest tests/test_integration_workflow.py -v -m "integration"

    - name: Run performance tests
      run: |
        pytest tests/test_performance.py -v -m "performance"

  cross-platform-tests:
    name: Cross-Platform Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Test CLI functionality
      run: |
        python -m pytest tests/test_cli.py -v

    - name: Test template system
      run: |
        python -m pytest tests/test_template_manager.py -v

    - name: Test memory system
      run: |
        python -m pytest tests/test_memory_manager.py -v

    - name: Test cross-platform compatibility
      shell: bash
      run: |
        python -c "
        import sys
        import os
        from pathlib import Path

        print('Python version:', sys.version)
        print('Platform:', sys.platform)
        print('OS:', os.name)

        # Test path handling
        test_path = Path('test') / 'subdir' / 'file.md'
        normalized = test_path.resolve()
        print('Path normalization works:', str(normalized))

        # Test file operations
        from specpulse.core.template_manager import TemplateManager
        from specpulse.core.memory_manager import MemoryManager

        print('Core modules import successfully')
        print('Cross-platform compatibility verified')
        "

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Bandit Security Linter
      run: |
        pip install bandit[toml]
        bandit -r specpulse/ -f json -o bandit-report.json || true

    - name: Run Safety Check
      run: |
        pip install safety
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Check code formatting with Black
      run: |
        black --check specpulse/ tests/

    - name: Lint with flake8
      run: |
        flake8 specpulse/ tests/

    - name: Type checking with mypy
      run: |
        mypy specpulse/ || true  # Allow mypy failures for now

    - name: Check import sorting
      run: |
        pip install isort
        isort --check-only specpulse/ tests/

  build-and-package:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [test, integration-tests, cross-platform-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  release:
    name: Release to PyPI
    runs-on: ubuntu-latest
    needs: [build-and-package]
    if: github.event_name == 'release' && github.event.action == 'published'

    environment:
      name: pypi
      url: https://pypi.org/p/specpulse

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  docs:
    name: Documentation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install sphinx sphinx-rtd-theme

    - name: Build documentation
      run: |
        cd docs
        make html

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html