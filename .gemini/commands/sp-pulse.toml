description = "Initialize a new feature with SpecPulse framework (SDD compliant)"
prompt = """
Initialize a new SpecPulse feature following Specification-Driven Development (SDD) principles.

## CRITICAL SECURITY NOTE
**NEVER edit files in these protected directories:**
- templates/ - Template files (spec.md, plan.md, task.md)
- scripts/ - Shell scripts (sp-pulse-*.sh)
- commands/ - AI command definitions
- .claude/ and .gemini/ - AI configuration files

**ONLY create and edit files in:**
- specs/ - Feature specifications
- plans/ - Implementation plans
- tasks/ - Task breakdowns
- memory/ - Project context (context.md, decisions.md)

## Command: /sp-pulse {{args}}

When called, perform the following steps:

1. **Validate arguments** and extract feature name + optional ID
   - Feature name: first argument
   - Optional ID: second argument (if provided)
   - Sanitize feature name (alphanumeric, hyphens only)

2. **Run initialization script**:
   - !{bash scripts/sp-pulse-init.sh "{{args}}"}
   - This creates the complete feature structure

3. **Create feature structure**:
   - Generate feature ID (001, 002, etc.) or use provided ID
   - Create sanitized branch name: ID-feature-name
   - Create directories: specs/ID-feature/, plans/ID-feature/, tasks/ID-feature/
   - Copy AI-optimized templates to feature directories
   - Update memory/context.md with current feature metadata
   - Create and switch to git branch if in git repository

4. **Suggest specification creation**:
   - Provide user with 2-3 AI-generated specification suggestions
   - Ask user to choose one or create custom specification
   - Guide user to use /sp-spec command after making selection
   - Example suggestions for "user-authentication":
     1. "User authentication with OAuth2 providers and JWT tokens"
     2. "Complete authentication system including registration, login, and profile management"
     3. "OAuth2 integration with social login providers"

5. **Validate structure** and report comprehensive status:
   - Feature ID: 001
   - Branch name: 001-user-authentication
   - Created paths: specs/001-user-authentication/, plans/001-user-authentication/, tasks/001-user-authentication/
   - Status: ready_for_spec
   - Next step: Use /sp-spec to create specification

## SDD Compliance Checklist
- [ ] Feature name is clear and specific (Principle 1)
- [ ] Structure supports specifications (Principle 1)
- [ ] Templates ready for iterative work (Principle 2)
- [ ] Supports any project type (Universal framework)

## Error Handling
- Feature name sanitization
- Directory creation validation
- Template existence verification
- Git repository validation
- Context file management

## Manual Workflow
After /sp-pulse, the workflow continues:
1. **Phase -1**: MANUAL - Use /sp-spec to create specification
2. **Phase 0**: MANUAL - Use /sp-plan to generate plan
3. **Phase 1**: MANUAL - Use /sp-task to create tasks
4. **Implementation**: Begin development following SDD

## Context Detection
The system automatically detects current feature from:
- memory/context.md for current feature
- Git branch name if available
- Most recently created feature directory
- Explicit specification in commands

## Multi-Feature Support
- Track multiple features simultaneously
- Switch context between features
- List all features with /sp-status
- Continue work with /sp-continue feature-name

Example usage: /sp-pulse user-authentication-oauth2
"""