#!/bin/bash
# Generate or update specification

set -euo pipefail  # Exit on error, unset vars, pipe failures

# Configuration
SCRIPT_NAME="$(basename "$0")"
# Script is in project-root/scripts/, so parent dir is project root
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# Function to log messages
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $SCRIPT_NAME: $1" >&2
}

# Function to handle errors
error_exit() {
    log "ERROR: $1"
    exit 1
}

# Validate arguments
if [ $# -eq 0 ]; then
    error_exit "Usage: $SCRIPT_NAME <feature-dir> [spec-content]"
fi

FEATURE_DIR="$1"
SPEC_CONTENT="${2:-}"

# Extract feature ID from directory name (e.g., "001-feature-name" -> "001")
FEATURE_ID=$(echo "$FEATURE_DIR" | grep -o '^[0-9]\{3\}' || echo "001")

# Sanitize feature directory
SANITIZED_DIR=$(echo "$FEATURE_DIR" | sed 's/[^a-zA-Z0-9_-]//g')

if [ -z "$SANITIZED_DIR" ]; then
    error_exit "Invalid feature directory: '$FEATURE_DIR'"
fi

SPEC_DIR="$PROJECT_ROOT/specs/${FEATURE_DIR}"
TEMPLATE_FILE="$PROJECT_ROOT/templates/spec.md"

# Validate template file exists before proceeding
if [ ! -f "$TEMPLATE_FILE" ]; then
    error_exit "Template not found: $TEMPLATE_FILE. Please ensure templates are properly initialized."
fi

# Ensure specs directory exists
mkdir -p "$SPEC_DIR" || error_exit "Failed to create specs directory: $SPEC_DIR"

# Find latest spec file or create new one
if [ -n "$SPEC_CONTENT" ]; then
    # Find next available spec number
    if [ -d "$SPEC_DIR" ]; then
        # Get the highest spec number and increment it
        highest_spec=$(find "$SPEC_DIR" -name "spec-*.md" -exec basename {} .md \; | sed 's/spec-//' | sort -n | tail -1)
        if [ -n "$highest_spec" ]; then
            spec_number=$((highest_spec + 1))
        else
            spec_number=1
        fi
    else
        spec_number=1
    fi
    SPEC_FILE="$SPEC_DIR/spec-$(printf "%03d" $spec_number).md"

    # Update specification with provided content
    log "Creating specification: $SPEC_FILE"
    echo "$SPEC_CONTENT" > "$SPEC_FILE" || error_exit "Failed to write specification content"
else
    # Interactive mode - AI should generate spec content
    # Check if spec-001.md exists
    if [ -f "$SPEC_DIR/spec-001.md" ]; then
        # Find next available spec number
        highest_spec=$(find "$SPEC_DIR" -name "spec-*.md" -exec basename {} .md \; | sed 's/spec-//' | sort -n | tail -1)
        if [ -n "$highest_spec" ]; then
            spec_number=$((highest_spec + 1))
        else
            spec_number=2
        fi
        SPEC_FILE="$SPEC_DIR/spec-$(printf "%03d" $spec_number).md"
        log "Creating specification file for AI generation: $SPEC_FILE"
        # Create placeholder file for AI to fill
        echo "# Specification - $FEATURE_DIR" > "$SPEC_FILE"
        echo "" >> "$SPEC_FILE"
        echo "<!-- INSTRUCTION: Generate specification content using template: $TEMPLATE_FILE -->" >> "$SPEC_FILE"
        echo "<!-- FEATURE_DIR: $FEATURE_DIR -->" >> "$SPEC_FILE"
        echo "<!-- FEATURE_ID: $FEATURE_ID -->" >> "$SPEC_FILE"
    else
        # Create first spec
        SPEC_FILE="$SPEC_DIR/spec-001.md"
        log "Creating first specification file for AI generation: $SPEC_FILE"
        # Create placeholder file for AI to fill
        echo "# Specification - $FEATURE_DIR" > "$SPEC_FILE"
        echo "" >> "$SPEC_FILE"
        echo "<!-- INSTRUCTION: Generate specification content using template: $TEMPLATE_FILE -->" >> "$SPEC_FILE"
        echo "<!-- FEATURE_DIR: $FEATURE_DIR -->" >> "$SPEC_FILE"
        echo "<!-- FEATURE_ID: $FEATURE_ID -->" >> "$SPEC_FILE"
    fi
fi

# Validate specification
log "Validating specification..."
if [ ! -f "$SPEC_FILE" ]; then
    error_exit "Specification file does not exist: $SPEC_FILE"
fi

# Check if file needs AI generation
if grep -q "INSTRUCTION: Generate specification" "$SPEC_FILE"; then
    log "WARNING: Specification needs to be generated by AI from template"
    MISSING_SECTIONS=("ALL - Awaiting AI Generation")
else
    # Check for required sections only if file has been generated
    REQUIRED_SECTIONS=("## Specification:" "## Metadata" "## Functional Requirements" "## Acceptance Scenarios")
    MISSING_SECTIONS=()

    for section in "${REQUIRED_SECTIONS[@]}"; do
        if ! grep -q "$section" "$SPEC_FILE"; then
            MISSING_SECTIONS+=("$section")
        fi
    done

    if [ ${#MISSING_SECTIONS[@]} -gt 0 ]; then
        log "WARNING: Missing required sections: ${MISSING_SECTIONS[*]}"
    fi
fi

# Check for clarifications needed
if grep -q "NEEDS CLARIFICATION" "$SPEC_FILE"; then
    CLARIFICATION_COUNT=$(grep -c "NEEDS CLARIFICATION" "$SPEC_FILE")
    log "WARNING: Specification has $CLARIFICATION_COUNT clarifications needed"
fi

log "Specification processing completed successfully"

echo "SPEC_FILE=$SPEC_FILE"
echo "CLARIFICATIONS_NEEDED=${CLARIFICATION_COUNT:-0}"
echo "MISSING_SECTIONS=${#MISSING_SECTIONS[@]}"
echo "STATUS=updated"